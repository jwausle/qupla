// returns lhs / rhs

template divMod<T> {
  type T2 {
    quotient [T]
    remainder [T]
  }
  
  // quotient truncated to nearest integer that is closest to zero
  func T2 divMod<T> (T lhs, T rhs) {
    absLhs = abs<T>(lhs)
    absRhs = abs<T>(rhs)
    quorem = roundDivModLoop<T>(absLhs, 0, absRhs, 1)
    quo = quorem.quotient
    rem = quorem.remainder

    // truncate downward if rem < 0
    fix = isNegative[sign<T>(rem)]
    quo0 = fix ? decr<T>(quo) : quo
    rem0 = fix ? add<T>(rem, absRhs) : rem

    return fixSign<T>(lhs, rhs, quo0, rem0)
  }

  // quotient rounds up to closest higher integer
  func T2 ceilDivMod<T> (T lhs, T rhs) {
    absLhs = abs<T>(lhs)
    absRhs = abs<T>(rhs)
    quorem = roundDivModLoop<T>(absLhs, 0, absRhs, 1)
    quo = quorem.quotient
    rem = quorem.remainder

    lhsSign = sign<T>(lhs)
    rhsSign = sign<T>(rhs)
    remSign = sign<T>(rem)

    neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
    up = and[not[neg], isPositive[remSign]]
    down = and[neg, isNegative[remSign]]
    none = nor[up, down]

    quoN0 = none ? quo : null
    quoN1 = incr<T>(up ? quo : null)
    quoN2 = decr<T>(down ? quo : null)
    quo0 = quoN0 | quoN1 | quoN2
    
    remN0 = none ? rem : null
    remN1 = sub<T>(up ? rem : null, absRhs)
    remN2 = add<T>(down ? rem : null, absRhs)
    rem0 = remN0 | remN1 | remN2

    return fixSign<T>(lhs, rhs, quo0, rem0)
  }

  // quotient rounds down to closest lower integer
  func T2 floorDivMod<T> (T lhs, T rhs) {
    absLhs = abs<T>(lhs)
    absRhs = abs<T>(rhs)
    quorem = roundDivModLoop<T>(absLhs, 0, absRhs, 1)
    quo = quorem.quotient
    rem = quorem.remainder

    lhsSign = sign<T>(lhs)
    rhsSign = sign<T>(rhs)
    remSign = sign<T>(rem)

    neg = xor[isNegative[lhsSign], isNegative[rhsSign]]
    down = and[not[neg], isNegative[remSign]]
    up = and[neg, isPositive[remSign]]
    none = nor[up, down]

    quoN0 = none ? quo : null
    quoN1 = incr<T>(up ? quo : null)
    quoN2 = decr<T>(down ? quo : null)
    quo0 = quoN0 | quoN1 | quoN2

    remN0 = none ? rem : null
    remN1 = sub<T>(up ? rem : null, absRhs)
    remN2 = add<T>(down ? rem : null, absRhs)
    rem0 = remN0 | remN1 | remN2

    return fixSign<T>(lhs, rhs, quo0, rem0)
  }

  // quotient rounds to the nearest integer
  // randomly when exactly halfway between integers
  func T2 roundDivMod<T> (T lhs, T rhs) {
    absLhs = abs<T>(lhs)
    absRhs = abs<T>(rhs)
    quorem = roundDivModLoop<T>(absLhs, 0, absRhs, 1)
    quo = quorem.quotient
    rem = quorem.remainder

    return fixSign<T>(lhs, rhs, quo, rem)
  }

  //  // algorithm for rounded integer division, assuming positive inputs
  //  balanced int rem, quo /* the remainder and quotient, return values */
  //  void div(balanced int dividend, balanced int divisor)
  //  {
  //    quo = dividend
  //    rem = 0
  //    for (i = 0 i < trits_per_word i++)
  //    {
  //      /* first shift rem-quo double register 1 trit left */
  //      (rem, quo) = (rem, quo) <<3 1
  //
  //      /* second, compute one trit of quotient */
  //      if (rem > 0)
  //      {
  //        balanced int low = rem - divisor
  //        if ((-low < rem) || ((-low == rem) && (quo > 0)))
  //        {
  //          quo = quo + 1
  //          rem = low
  //        }
  //      }
  //      else if (rem < 0)
  //      {
  //        balanced int high = rem + divisor
  //        if ((-high > rem) || ((-high == rem) && (quo < 0)))
  //        {
  //          quo = quo - 1
  //          rem = high
  //        }
  //      }
  //    }
  //  }

  func T2 roundDivModLoop<T> (T quo, T rem, T div, T shf) {
    quorem = roundDivModPass<T>(quo, rem, div)

    newShf = rshift<T>(shf)
    zero = isZero[sign<T>(newShf)]
    quo1 = quorem.quotient
    rem1 = quorem.remainder
    return zero ? quorem : roundDivModLoop<T>(quo1, rem1, div, newShf)
  }

  func T2 roundDivModPass<T> (T quo, T rem, T div) {
    quorem = as<T2>(rshift<T2>(quo & rem))
    quo0 = quorem.quotient
    rem0 = quorem.remainder
    remSign = sign<T>(rem0)
    quoSign = sign<T>(quo0)

    low = sub<T>(rem0, div)
    neg1 = neg<T>(low)
    cmp1 = cmp<T>(neg1, rem0)
    posRem = isPositive[remSign]
    posQuo = isPositive[quoSign]
    test1 = and[posRem, or[isLess[cmp1], and[isZero[cmp1], posQuo]]]

    high = add<T>(rem0, div)
    neg2 = neg<T>(high)
    cmp2 = cmp<T>(neg2, rem0)
    negRem = isNegative[remSign]
    negQuo = isNegative[quoSign]
    test2 = and[negRem, or[isGreater[cmp2], and[isEqual[cmp2], negQuo]]]

    quorem1 = T2 {
      quotient = incr<T>(quo0)
      remainder = low
    }
    quorem2 = T2 {
      quotient = decr<T>(quo0)
      remainder = high
    }
    return test1 ? quorem1 : test2 ? quorem2 : quorem
  }

  func T2 fixSign<T> (T lhs, T rhs, T quo, T rem) {
    lhsSign = sign<T>(lhs)
    rhsSign = sign<T>(rhs)

    negRem = isNegative[lhsSign]
    negQuo = xor[negRem, isNegative[rhsSign]]

    quo1 = negQuo ? neg<T>(quo) : quo
    rem1 = negRem ? neg<T>(rem) : rem
    return T2 {
      quotient = quo1
      remainder = rem1
    }
  }
}
