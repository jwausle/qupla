//LUT logic: return trit1 * trit2
lut fullMul {
  -,- = 1
  -,0 = 0
  -,1 = -
  0,- = 0
  0,0 = 0
  0,1 = 0
  1,- = -
  1,0 = 0
  1,1 = 1
}


// returns lhs * rhs

func TritCarry fullMul<Trit> (Trit lhs, Trit rhs) {
  return fullMul[lhs, rhs] & 0
}

func TritCarry fullMulNonZero<Trit> (Trit lhs, Trit rhs) {
  return fullMul[lhs, rhs] & 0
}

// this does elementary school type multiplication in the base of the next lower type
// so it essentially multiplies two 3-digit values where the digits are of that base which allows
// us to easily construct each next data type level in terms of the previous data type level.
// still WIP atm, and it should be verified that this algorithm works correctly with balanced
// ternary, which has negative 'digits' (my programmer instinct says it should)

// ABC * DEF
//        AD
//       AE0
//      AF00
//       BD0 
//      BE00
//     BF000
//      CD00
//     CE000
//    CF0000  1
//-------------

// reorder a little by grouping same-level terms

// ABC * DEF
//        AD
//       AE0
//       BD0 
//      AF00
//      BE00
//      CD00
//     BF000
//     CE000
//    CF0000  1
//-------------


//TODO depends on P being T / 3 or T / 2
//     need to make it work for all T

// note that a fullMul() function will return double the width
// of its parameters so as not to lose any precision

// this template only works for multiples of 3
template fullMul3<T> = P + P + P {
  type T2 [T * 2]
  type P [T / 3]
  type P2 [P * 2]
  type P2Carry {
    value [P2]
    carry [Carry]
  }

  func T2 fullMul<T> (T lhs, T rhs) {
    lhsZero = isZero[sign<T>(lhs)]
    rhsZero = isZero[sign<T>(rhs)]
    return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<T>(lhs, rhs)
  }

  func T2 fullMulNonZero<T> (T lhs, T rhs) {
    // get lhs digits
    A = lhs[P * 0 : P]
    B = lhs[P * 1 : P]
    C = lhs[P * 2 : P]

    // get rhs digits
    D = rhs[P * 0 : P]
    E = rhs[P * 1 : P]
    F = rhs[P * 2 : P]

    // determine all products
    AD = fullMul<P>(A, D)
    AE = fullMul<P>(A, E)
    AF = fullMul<P>(A, F)
    BD = fullMul<P>(B, D)
    BE = fullMul<P>(B, E)
    BF = fullMul<P>(B, F)
    CD = fullMul<P>(C, D)
    CE = fullMul<P>(C, E)
    CF = fullMul<P>(C, F)

    // note: the sum of 2 products can never generate
    //      a carry, but the sum of 3 products can...

    // AD
    tryte0 = AD[P * 0 : P]
    carry0 = AD[P * 1 : P]

    // AE0 + BD0 + carry0
    AEBD = addProduct<P>(AE, BD)
    AEBDc = addCarryToProduct<P>(AEBD.value, carry0, 0)
    tryte1 = AEBDc[P * 0 : P]
    carry1 = AEBDc[P * 1 : P]

    // AF00 + BE00 + CD00 + carry1
    AFBE = addProduct<P>(AF, BE)
    AFBEc = addCarryToProduct<P>(AFBE.value, carry1, 0)
    // note: adding 3rd product, watch the extra overflow carry trit
    AFBEcCD = addProduct<P>(AFBEc, CD)
    tryte2 = AFBEcCD[P * 0 : P]
    carry2 = AFBEcCD[P * 1 : P]

    // BF000 + CE000 + carry2
    BFCE = addProduct<P>(BF, CE)
    BFCEc = addCarryToProduct<P>(BFCE.value, carry2, 0)
    tryte3 = BFCEc[P * 0 : P]
    carry3 = BFCEc[P * 1 : P]

    // CF0000 + carry3
    // note: this is where the extra overflow carry trit goes
    CFc = addCarryToProduct<P>(CF, carry3, AFBEcCD.carry)
    // tryte4 = CFc[P * 0 : P]
    // tryte5 = CFc[P * 1 : P]

    return tryte0 & tryte1 & tryte2 & tryte3 & CFc
  }

  // add two products together
  func P2Carry addProduct<P>(P2 lhs, P2 rhs) {
    lo = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], 0)
    hi = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], lo.carry)
    return lo.value & hi
  }

  // add carry and possible extra trit to a product
  func P2 addCarryToProduct<P>(P2 lhs, P carry, Carry extraTrit) {
    lo = fullAdd<P>(lhs[P * 0 : P], carry, extraTrit)
    hi = halfAdd<P>(lhs[P * 1 : P], lo.carry)
    return lo.value & hi.value
  }
}


// this template only works for multiples of 2
template fullMul<T> = P + P {
  type T2 [T * 2]
  type P [T / 2]
  type P3 [P * 3]

  func T2 fullMul<T> (T lhs, T rhs) {
    lhsZero = isZero[sign<T>(lhs)]
    rhsZero = isZero[sign<T>(rhs)]
    return or[lhsZero, rhsZero] ? 0 : fullMulNonZero<T>(lhs, rhs)
  }

  func T2 fullMulNonZero<T> (T lhs, T rhs) {
    zero = as<P>(0)
    product = fullMulNonZero<P3>(lhs & zero, rhs & zero)
    return product[0 : T2]
  }
}
